////Mixins
//--------------------------------------------------

.clearfix() {
	&:before,
	&:after {
		content: " "; /* 1 */
		display: table; /* 2 */
	}
	&:after {
		clear: both;
	}
}

// WebKit-style focus
.tab-focus() {
	// Default
	outline: thin dotted #333;
	// WebKit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}

// Center-align a block level element
.center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// RESPONSIVE IMAGE
// Keep images from scaling beyond the width of their parents.

.img-responsive(@display: block;) {
	display: @display;
	max-width: 100%; // Part 1: Set a maximum relative to the parent
	height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
.nav-divider(@color: #e5e5e5) {
	height: 1px;
	margin: ((@line-height-computed / 2) - 1) 0;
	overflow: hidden;
	background-color: @color;
}

// Responsive container? (custom)
// -----------

.container-width() when (@responsive = true) {
	max-width: @container-desktop;
}

.container-width() when (@responsive = false) {
	width: @container-desktop;
}

.fixed-outer-container-mixin() when (@responsive = false) {
	// For å unngå "clipping" / disappearing content ved horisontal scroll, når fixed width.
	.fixed-outer-container,
	.sitefooter,
	.pagewrapper {
		min-width: @container-desktop;
	}
}

// Grid System
// -----------

// Centered container element
.container-fixed() {
	margin-right: auto;
	margin-left: auto;
	padding-left: 1.5625em; // 1.5625 tilsvarer 25px. Verdi her var tidligere (@grid-gutter-width / 2);
	padding-right: 1.5625em; //(@grid-gutter-width / 2);
	.clearfix();
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
	margin-left: (@gutter / -4);
	margin-right: (@gutter / -4);
	.clearfix();
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @grid-gutter-width) {
	// IKKE i bruk
	position: relative;
	float: left;
	width: percentage((@columns / @grid-columns));
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left: (@gutter / 4);
	padding-right: (@gutter / 4);
}

// Generate the small columns
.make-sm-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left: (@gutter / 4);
	padding-right: (@gutter / 4);
	/* @media (max-width: (@screen-small - 0.01)) {
			 padding-left: 0;
			 padding-right: 0;
	  }*/

	// Calculate width based on number of columns available
	@media (min-width: @screen-xs) {
		float: left;
		width: percentage((@columns / @grid-columns));
	}
}

// Generate the small column offsets
.make-sm-column-offset(@columns) {
	@media (min-width: @screen-xs) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-sm-column-push(@columns) {
	@media (min-width: @screen-xs) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-sm-column-pull(@columns) {
	@media (min-width: @screen-xs) {
		right: percentage((@columns / @grid-columns));
	}
}

// Generate the medium columns
.make-md-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left: (@gutter / 4);
	padding-right: (@gutter / 4);

	// Calculate width based on number of columns available
	@media (min-width: @screen-medium) {
		float: left;
		width: percentage((@columns / @grid-columns));
	}
}

// Generate the medium column offsets
.make-md-column-offset(@columns) {
	@media (min-width: @screen-medium) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-md-column-push(@columns) {
	@media (min-width: @screen-medium) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-md-column-pull(@columns) {
	@media (min-width: @screen-medium) {
		right: percentage((@columns / @grid-columns));
	}
}

// Generate the large columns
.make-lg-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left: (@gutter / 2);
	padding-right: (@gutter / 2);

	// Calculate width based on number of columns available
	@media (min-width: @screen-large) {
		float: left;
		width: percentage((@columns / @grid-columns));
	}
}

// Generate the large column offsets
.make-lg-column-offset(@columns) {
	@media (min-width: @screen-large) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-lg-column-push(@columns) {
	@media (min-width: @screen-large) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-lg-column-pull(@columns) {
	@media (min-width: @screen-large) {
		right: percentage((@columns / @grid-columns));
	}
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.

.make-grid-columns() {
	// Common styles for all sizes of grid columns, widths 1-12
	.col(@index) when (@index = 1) {
		// initial
		@item: ~".col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}"; // removed .col-xs-@{index}. Consider adding XL instead, if needed
		.col(@index + 1, @item);
	}
	.col(@index, @list) when (@index =< @grid-columns) {
		// general; "=<" isn't a typo
		@item: ~".col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}"; // removed .col-xs-@{index},
		.col(@index + 1, ~"@{list}, @{item}");
	}
	.col(@index, @list) when (@index > @grid-columns) {
		// terminal
		@{list} {
			position: relative;
			// Prevent columns from collapsing when empty
			min-height: 1px;
			// Inner gutter via padding
			padding-left: (@grid-gutter-width / 4);
			padding-right: (@grid-gutter-width / 4);
			/*@media (max-width: (@screen-small - 0.01)) {
					padding-left: 0;
					padding-right: 0;
			  }*/
		}
	}
	.col(1); // kickstart it
}

.make-grid-columns-float(@class) {
	.col(@index) when (@index = 1) {
		// initial
		@item: ~".col-@{class}-@{index}";
		.col(@index + 1, @item);
	}
	.col(@index, @list) when (@index < @grid-columns) {
		// general
		@item: ~".col-@{class}-@{index}";
		.col(@index + 1, ~"@{list}, @{item}");
	}
	.col(@index, @list) when (@index = @grid-columns) {
		// terminal
		@{list} {
			float: left;
		}
	}
	.col(1); // kickstart it
}

.calc-grid(@index, @class, @type) when (@type = width) and (@index > 0) {
	.col-@{class}-@{index} {
		width: percentage((@index / @grid-columns));
	}
}

.calc-grid(@index, @class, @type) when (@type = push) {
	.col-@{class}-push-@{index} {
		left: percentage((@index / @grid-columns));
	}
}

.calc-grid(@index, @class, @type) when (@type = pull) {
	.col-@{class}-pull-@{index} {
		right: percentage((@index / @grid-columns));
	}
}

.calc-grid(@index, @class, @type) when (@type = offset) {
	.col-@{class}-offset-@{index} {
		margin-left: percentage((@index / @grid-columns));
	}
}

// Basic looping in LESS
.make-grid(@index, @class, @type) when (@index >= 0) {
	.calc-grid(@index, @class, @type);
	// next iteration
	.make-grid(@index - 1, @class, @type);
}



//--------------------------------------------------------
//
//  CUSTOM STYLES FROM THIS POINT
//
//--------------------------------------------------------


// -------------------------
// Bullet point
// -------------------------
.bullet-point(@border-size, @border-color, @left, @top) {
	// Hvorfor har vi egentlig denne?
	// Svar: "bullet point" separering mellom lenker er noe som brukes
	// flere plasser og det krever en del css linjer, kan gjenbrukes her
	border: @border-size solid @border-color;
	border-radius: 50% 50% 50% 50%;
	content: " ";
	left: @left;
	top: @top;
	float: left;
	position: absolute;
	text-align: left;
}

// Down arrow (caret, dropdown)
// -------------------------

.down-arrow(@border-left, @border-right, @border-top, @color) {
	border-left: @border-left solid transparent;
	border-right: @border-right solid transparent;
	border-top: @border-top solid @color;
	content: "";
	display: inline-block;
	height: 0;
	width: 0;
	vertical-align: top;
}
